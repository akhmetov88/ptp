@using System.Globalization
@using TradingPlatform.Enums
@model TradingPlatform.Models.EntityModel.BetViewModel

@*<script src="~/Scripts/jquery-2.2.4.min.js"></script>
<script src="~/Scripts/jquery.countdown.min.js"></script>*@

<div class="modal-content left-dialog" onclick="changeScale('left');">
    <div class="modal-header">
        <span data-countdown="@Model.DateEnd.ToParse()" class="time"><i class="fa fa-clock-o" aria-hidden="true"></i></span>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true"><img src="~/Content/images/modal-close-btn.png"></span>
        </button>
        <h4 class="modal-title" id="">@LocalText.Inst.Get("totle", "BetModel", "Зробити ставку ", "Сделать ставку ")</h4>
    </div>
    @using (Ajax.BeginForm("Bet", "Trade", FormMethod.Post, new AjaxOptions() { OnSuccess = "onTwoModelSuccess" }, new { id = "betForm" }))
    {
        <div class="modal-body">
            <div class="row">
                @Html.LabelFor(c => c.LotsCount, LocalText.Inst.Get("label", "labelBetConfirm", "Підтвердити:", "Подтвердить:"), new { @class = "col-sm-5" })
                <div class="col-sm-7">@Html.DisplayFor(c => c.LotsCount) лот (@Model.LotVolume.ToString("F0") тн.) </div>
            </div>
            <div class="row noselect">
                @Html.LabelFor(c => c.Price, LocalText.Inst.Get("label", "labelBetConfirmPrice", "По ціні:", "По цене:"), new { @class = "col-sm-5" })
                <div class="col-sm-7">
                    <span class="inc-step" onclick="return IncDec(false);">-</span>
                    <span id="display-price">@Model.Price.Value.ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " ", CurrencyDecimalDigits = 0 })</span> грн./тн.
                    <span class="dec-step" onclick="return IncDec(true);">+</span>
                    <br /><span style="font-size:smaller;">(@LocalText.Inst.Get("text", "LabelStep", "крок", "шаг")  @Html.DisplayFor(c => c.Step))</span>
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(c => c.Sum, LocalText.Inst.Get("label", "labelBetConfirmSumm", "На суму:", "На сумму:"), new { @class = "col-sm-5" })
                <div id="firstsum" class="col-sm-7">

                </div>
            </div>
            @if (Model.Buyers.Count > 1)
            {
                @Html.LabelFor(c => c.BuyerId, LocalText.Inst.Get("label", "labelBetFromContragent", "Представляючи:", "От лица:"), new { @class = "col-sm-5" })
                @Html.DropDownListFor(c => c.BuyerId, Model.Buyers, new { @class = "auction-value col-sm-7" })
            }
            else
            {
                <div class="row">
                    @Html.LabelFor(c => c.BuyerId, LocalText.Inst.Get("label", "labelBetFromContragent", "Представляючи:", "От лица:"), new { @class = "col-sm-5" })
                    @Html.DisplayFor(c => c.BuyerName, new { @class = "col-sm-7" })
                </div>
                @Html.HiddenFor(c => c.BuyerId)
            }
            @Html.HiddenFor(c => c.TradeId)
            @*@Html.HiddenFor(c => c.LotsCount)*@
            @Html.HiddenFor(c => c.Price)
            @Html.HiddenFor(c => c.LotId)
            @Html.Hidden("IsRedemption", false)
            <div id="error" class="text-danger"></div>
        </div>
        <div class="modal-footer">
            <button type="submit" id="submitBet">OK</button>
            @*<input type="submit" value="OK"/>*@
        </div>
    }
</div>
<div class="modal-content right-dialog" onclick="changeScale('right');">
    <div class="modal-header">
        <span data-countdown="@Model.DateEnd.ToParse()" class="time"></span>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true"><img src="~/Content/images/modal-close-btn.png"></span>
        </button>
        <h4 class="modal-title" id="">@LocalText.Inst.Get("totle", "BetModelRedeem", "Викупити ставку ", "Выкупить ставку ")</h4>
    </div>
    @using (Ajax.BeginForm("Bet", "Trade", FormMethod.Post, new AjaxOptions() { OnSuccess = "onTwoModelSuccess", OnFailure = "onTwoModelFailure" },new {id= "buyForm" }))
    {
        <div class="modal-body">
            <div class="row">
                @Html.LabelFor(c => c.LotsCount, LocalText.Inst.Get("label", "labelBetPay", "Викупити:", "Выкупить:"), new { @class = "col-sm-5" })
                <div class="col-sm-7">
                    <span class="inc-step" onclick="return RedempOne(false);">-</span>
                    <span id="LotsCountt">@Model.LotsCount лот (@Model.LotVolume.ToString("F0") тн)</span>
                    <span class="dec-step" onclick="return RedempOne(true);">+</span>
                </div>
                @Html.HiddenFor(c => c.TradeId)
            </div>
            <div class="row">
                @Html.LabelFor(c => c.Price, LocalText.Inst.Get("label", "labelBetConfirmPrice", "По ціні:", "По цене:"), new { @class = " col-sm-5" })
                <div class="col-sm-7">
                    @Model.MaxPrice.Value.ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " ", CurrencyDecimalDigits = 0 }) грн./тн.
                    @Html.Hidden("Price", Model.MaxPrice, new { @id = "pricecalc" })
                    @Html.Hidden("tresdfsdf", Model.LotVolume, new { @id = "volumecalc" })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(c => c.Sum, LocalText.Inst.Get("label", "labelBetConfirmSumm", "На суму:", "На сумму:"), new { @class = "col-sm-5" })
                <div id="sum" class="col-sm-7">
                    @((Model.MaxPrice * Model.LotVolume ?? 0 * Model.LotVolume * Model.LotsCount * Model.LotVolume).ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " ", CurrencyDecimalDigits = 0 })) грн.

                </div>
            </div>
            @if (Model.Buyers.Count > 1)
            {

                <div class="row">
                    @Html.LabelFor(c => c.BuyerId, LocalText.Inst.Get("label", "labelBetFromContragent", "Представляючи:", "От лица:"), new { @class = "col-sm-5" })
                    @Html.DropDownListFor(c => c.BuyerId, Model.Buyers, new { @class = "col-sm-7" })
                </div>
            }
            else
            {
                <div class="row">
                    @Html.LabelFor(c => c.BuyerId, LocalText.Inst.Get("label", "labelBetFromContragent", "Представляючи:", "От лица:"), new { @class = "col-sm-5" })
                    @Html.DisplayFor(c => c.BuyerName, null, new { @class = "col-sm-7" })
                </div>
                @Html.HiddenFor(c => c.BuyerId)
                @Html.HiddenFor(c => c.LotId)
                @Html.Hidden("IsRedemption", true)
                @Html.HiddenFor(c => c.LotsCount)
            }
            <div class="text-danger" id="error"></div>
        </div>
        <div class="modal-footer">
            <button type="submit" id="submitBuy">OK</button>
        </div>
    }

</div>

<script>
    $("#submitBuy").one("click", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        $('#buyForm').submit();
    });
    $("#submitBet").one("click", function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        $('#betForm').submit();
    });


    function SetSum() {
        var sum = parseFloat($('#LotsCountMax').val()) * parseFloat($('#pricecalc').val()) * parseFloat($('#volumecalc').val());
        var lotsvolume = sum / parseFloat(parseFloat($('#pricecalc').val()));
        $('#sum').text(sum.toLocaleString() + " грн");
        $('#lotsvolume').text('(' + lotsvolume.toLocaleString() + " тн)");
    };

    $(function () {
        var sum = parseFloat(@Model.Sum);
        if (sum != null && sum !== NaN) {
            $('#firstsum').text(sum.toLocaleString() + " грн");
        } else {
            sum = parseFloat(('#Price').val()) * parseFloat(@Model.LotVolume);
            $('#firstsum').text(sum.toLocaleString() + " грн");
        }

    });
    var lotVolume = parseFloat(@Model.LotVolume);
    var minPrice = parseFloat(@Model.Price);
    var maxPrice = parseFloat(@Model.MaxPrice);
    var step = parseFloat(@Model.Step);
    var lotsCount = parseInt(@Model.LotsCount);
    var lotsCountAv = parseInt(@Model.LotsCountMax);
    function IncDec(inc) {
        var buff = minPrice;
        if (inc) {
            buff = parseFloat($('#display-price').html().replace(' ', '').replace('&nbsp;', '').replace(' ', '').replace('&nbsp;', '')) + step;
            if (buff < maxPrice) {
                UpdatePrice(buff);
            } else {
                window.setTimeout(function () { changeScale('right'); }, 500);
            }
        } else {
            buff = parseFloat($('#display-price').html().replace(' ', '').replace('&nbsp;', '').replace(' ', '').replace('&nbsp;', '')) - step;
            if (buff >= minPrice) {
                UpdatePrice(buff);
            }
        }
        return false;
    };

    function RedempOne(inc) {
        var t = parseInt($('#LotsCountt').text());
        if (inc) {
            if (t < lotsCountAv)
                t++;
            $('#LotsCount').val(t);
        } else {
            if(t > 1) {
                t--;
                $('#LotsCount').val(t);
            }
        }
        $('#LotsCountt').text(t.toLocaleString() + " лот (" + (lotVolume * $('#LotsCount').val()).toLocaleString() + " т)");
        $('#sum').html(parseFloat(t * lotVolume * maxPrice).toLocaleString() + " грн");
        return false;
    };

    function UpdatePrice(price) {
        $('#display-price').html(price.toLocaleString());
        $('#Price').val(parseFloat(price));
        $('#firstsum').text((parseFloat(price) * lotVolume).toLocaleString() + " грн");
    };

    //$(document).ready(function () {
    //    $("form").submit(function () {
    //        var elem = $("#submitBet");
    //        elem.attr("disabled", "disabled");
    //        var oldval = elem.html();
    //        // elem.disabled = true;
    //        elem.html('<i class="fa fa-spinner fa-spin fa-3x"></i>');
    //        setTimeout(function () {
    //            elem.attr('disabled', false);
    //            elem.html(oldval);
    //            $('.close').click();
    //        }, 1000);
    //    });

    $('[data-countdown]').each(function () {
        var $this = $(this), finalDate = $(this).data('countdown');
        $this.countdown(finalDate, function (event) {
            $this.html(event.strftime('<i class="fa fa-clock-o" aria-hidden="true"></i> %H:%M:%S'));
        });
    });
    //});

    //$(document).ready(function () {
    //    $("form").submit(function () {
    //        var elem = $("#submitBuy");
    //        elem.attr("disabled", "disabled");
    //        var oldval = elem.html();
    //        // elem.disabled = true;
    //        elem.html('<i class="fa fa-spinner fa-spin fa-3x"></i>');
    //        setTimeout(function () {
    //            elem.attr('disabled', false);
    //            elem.html(oldval);
    //            $('.close').click();
    //        }, 1000);

    //    });
    //});
    //$(function() {
    //    $('#firstsum').text((parseFloat(price) * lotVolume).toLocaleString() + " грн");
    //});
</script>