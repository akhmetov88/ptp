@using System.Globalization
@using TradingPlatform.Enums
@model List<TradingPlatform.Models.EntityModel.BetViewModel>
@{
    ViewBag.Title = @LocalText.Inst.Get("title", "createTradeHistoryTitle", "Історія торгів", "История торгов");
}
<table class="details-table">
    <tbody>
        <tr>
            <th>@LocalText.Inst.Get("text", "betsTableBetTime", "Час", "Время")</th>
            <th>@LocalText.Inst.Get("text", "betsTableLotsCount", "Кількість лотів", "Количество лотов")</th>
            <th>@LocalText.Inst.Get("text", "betsTableVolume", "Об’єм", "Объём")</th>
            <th>@LocalText.Inst.Get("text", "betsTableBetPrice", "Ціна", "Цена")</th>
            <th>@LocalText.Inst.Get("text", "betsTableSum", "Сума", "Сумма")</th>
            <th>@LocalText.Inst.Get("text", "betsTableBuyerName", "Хто поставив", "Кто поставил")</th>
            <th>@LocalText.Inst.Get("text", "betsTableBet", "Ставка", "Ставка")</th>
        </tr>
        @if (Model.Count > 0)
        {
            foreach (var row in Model)
            {
                <tr class="@(row.IsCurrentUserBet ? "mybet" : "")">
                    <td>@row.DateBet.ToClientTime()</td>
                    <td>@Html.DisplayFor(c => row.LotsCount)</td>
                    <td>@row.Volume.Value.ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " " })</td>
                    <td>@row.Price.Value.ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " " })</td>
                    <td>@row.Sum.ToString("C", new NumberFormatInfo() {CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " "})</td>
                    <td>@row.BuyerName</td>
                    <td>
                        @if (row.IsRedemption)
                        {
                            @LocalText.Inst.Get("text", "betsTableRedemptioText", "викуплена", "выкуплена")
                        }
                        @if (!row.IsRedemption && row.IsActual&&row.IsCurrentUserBet)
                        {
                            @LocalText.Inst.Get("text", "betsTableActualText", "дійсна", "действительна")
                        }
                        @if (!row.IsRedemption && row.IsActual && !row.IsCurrentUserBet)
                        {
                            if (Model.Any(c=>c.MaxPrice.HasValue))
                            {
                                <a class="btn btn-primary btn-green" role="button" href="#" onclick="OpenModelTwo('@Url.Action("ReBet", "Trade", new {trade = row.TradeId, betId=row.Id})', this);">@LocalText.Inst.Get("text", "betsTableDoRebetText", "перебити", "перебить")</a>
                            }
                            else
                            {
                                <a class="btn btn-primary btn-green modal-link1" role="button" href="@Url.Action("ReBet", "Trade", new {trade = row.TradeId, betId=row.Id})">@LocalText.Inst.Get("text", "betsTableDoRebetText", "перебити", "перебить")</a>
                            }
                        }
                        @if (!row.IsRedemption && !row.IsActual)
                        {
                            @LocalText.Inst.Get("text", "betsTableReBetText", "перебита", "перебита")
                        }
                    </td>
                </tr>
            }
           
            <tr class="result">
                <td class="summary"><span class="bold-txt">@LocalText.Inst.Get("text", "betsTableSummary", "Всього", "Всего"):</span></td>
                <td>@Model.Sum(c => c.LotsCount)</td>
                <td>@Model.Sum(c => c.Volume)</td>
                <td>
                    @if (Model.Count > 0)
                    {
                        @Model.Average(c => c.Price.Value).ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " ", CurrencyDecimalDigits = 2 })
                    }
                    else
                    {
                        <text>0</text>
                    }
                </td>
                <td>@Model.Sum(c => c.Sum).ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " " })</td>
                <td></td>
                <td></td>
            </tr>
            <tr class="result">
                <td class="summary"><span class="bold-txt">@LocalText.Inst.Get("text", "betsTableRedemptioSummary", "Викуплено", "Выкуплено"):</span></td>
                <td>@Model.Where(x => x.IsRedemption).Sum(c => c.LotsCount)</td>
                <td>@Model.Where(x => x.IsRedemption).Sum(c => c.Volume)</td>
                @if (Model.Any(x => x.IsRedemption))
                {
                    <td>
                        @Model.Where(x => x.IsRedemption).Average(c => c.Price.Value).ToString("C", new NumberFormatInfo() {CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " ", CurrencyDecimalDigits = 2})
                    </td>
                }
                else
                {
                    <td>0</td>
                }
                <td>@Model.Where(x => x.IsRedemption).Sum(c => c.Sum).ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " " })</td>
                <td></td>
                <td></td>
            </tr>
            <tr class="result">
                <td class="summary"><span class="bold-txt">@LocalText.Inst.Get("text", "betsTableActualSummary", "Дійсно", "Действительно"):</span></td>
                <td>@Model.Where(x => !x.IsRedemption && x.IsActual).Sum(c => c.LotsCount)</td>
                <td>@Model.Where(x => !x.IsRedemption && x.IsActual).Sum(c => c.Volume)</td>
                @if (Model.Any(x => !x.IsRedemption && x.IsActual))
                {
                    <td>@Model.Where(x => !x.IsRedemption && x.IsActual).Average(c => c.Price.Value).ToString("C", new NumberFormatInfo() {CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " ", CurrencyDecimalDigits = 2})</td>
                }
                else
                {
                    <td>0</td>
                }
                <td>@Model.Where(x => !x.IsRedemption && x.IsActual).Sum(c => c.Sum).ToString("C", new NumberFormatInfo() { CurrencySymbol = "", CurrencyDecimalSeparator = ".", CurrencyGroupSeparator = " " })</td>
                <td></td>
                <td></td>
            </tr>
        }
    </tbody>
</table>

